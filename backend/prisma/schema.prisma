// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id                       Int             @id @default(autoincrement())
  email                    String          @unique
  password                 String
  firstName                String
  lastName                 String
  location                 String?
  jobTitle                 String?
  about                    String?
  education                Education[]
  experience               Experience[]
  skills                   Skill[]
  notifications            Notification[]
  posts                    Post[]
  comments                 Comment[]
  profilePicture           String?
   likes                   Like[]
  connections              Connection[]    @relation("UserConnections")
  friendConnections        Connection[]    @relation("UserFriendConnections")
  userFriendRequests       FriendRequest[] @relation("Requesters")
  receivedFriendRequests   FriendRequest[] @relation("Recipients")
  story                    Story[]         @relation("userStory")
  connectionCount Int @default(0)
}

model Education {
  id        Int      @id @default(autoincrement())
  school    String
  degree    String
  startDate DateTime
  endDate   DateTime
  grade     String
  logo      String?
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Experience {
  id        Int      @id @default(autoincrement())
  company   String
  position  String
  startDate DateTime
  endDate   DateTime
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Skill {
  id     Int    @id @default(autoincrement())
  name   String
  userId Int
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id              Int           @id @default(autoincrement())
  userId          Int
  type            String
  content         String
  isRead          Boolean       @default(false)
  createdAt       DateTime      @default(now())
  user            User          @relation(fields: [userId], references: [id])
  friendRequestId Int?
  friendRequest   FriendRequest? @relation(fields: [friendRequestId], references: [id])
  storyId         Int?          // New field
  story           Story?        @relation(fields: [storyId], references: [id]) // New relation
}


model Connection {
  id           Int    @id @default(autoincrement())
  userId       Int
  friendId     Int
  status       String
  user         User   @relation("UserConnections", fields: [userId], references: [id], onDelete: Cascade)
  friend       User   @relation("UserFriendConnections", fields: [friendId], references: [id], onDelete: Cascade)
}

model FriendRequest {
  id           Int           @id @default(autoincrement())
  requesterId  Int
  recipientId  Int
  status       String
  requester    User          @relation("Requesters", fields: [requesterId], references: [id], onDelete: Cascade)
  recipient    User          @relation("Recipients", fields: [recipientId], references: [id], onDelete: Cascade)
  notifications Notification[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  postId    Int
  post      Post     @relation(fields: [postId], references: [id])
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}

model Story {
  id            Int           @id @default(autoincrement())
  userId        Int
  fileUrl       String
  createdAt     DateTime      @default(now())
  expiresAt     DateTime
  user          User          @relation("userStory", fields: [userId], references: [id])
  notifications Notification[]
}

model Post {
  id        Int      @id @default(autoincrement())
  content   String
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  likeCount Int      @default(0)
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  comments  Comment[]
  likes     Like[]
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int

  @@unique([postId, userId])
}
