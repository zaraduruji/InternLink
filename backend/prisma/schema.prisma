// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       Int             @id @default(autoincrement())
  email                    String          @unique
  password                 String
  firstName                String
  lastName                 String
  location                 String?
  jobTitle                 String?
  about                    String?
  education                Json?
  profilePicture           String?
  connections              Connection[]    @relation("UserConnections")
  friendConnections        Connection[]    @relation("UserFriendConnections")
  userFriendRequests       FriendRequest[] @relation("Requesters")
  receivedFriendRequests   FriendRequest[] @relation("Recipients")
  story                    Story[]         @relation("userStory")
}

model Connection {
  id           Int    @id @default(autoincrement())
  userId       Int
  friendId     Int
  status       String
  user         User   @relation("UserConnections", fields: [userId], references: [id], onDelete: Cascade)
  friend       User   @relation("UserFriendConnections", fields: [friendId], references: [id], onDelete: Cascade)
}

model FriendRequest {
  id        Int    @id @default(autoincrement())
  requesterId Int
  recipientId Int
  status    String
  requester User   @relation("Requesters", fields: [requesterId], references: [id], onDelete: Cascade)
  recipient User   @relation("Recipients", fields: [recipientId], references: [id], onDelete: Cascade)
}

model JobListing {
  id                 Int       @id @default(autoincrement())
  role               String
  userProfilePicture String
  imageUrl           String?
  description        String
  timestamp          DateTime  @default(now())
  companyName        String
  uploaderName       String
  likeCount          Int?      @default(0)
  comments           Comment[]
}

model Comment {
  id           Int        @id @default(autoincrement())
  content      String
  timestamp    DateTime   @default(now())
  jobListing   JobListing @relation(fields: [jobListingId], references: [id])
  jobListingId Int
}

model Story {
  id        Int      @id @default(autoincrement())
  userId    Int
  fileUrl   String
  createdAt DateTime @default(now())
  user      User     @relation("userStory", fields: [userId], references: [id])
}
